package pim.notes;


import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.util.*;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;


import pim.*;
import pim.util.WrapLayout;


/**
 * Klasse zum erstellen des NotePanels ueber ein JPanel
 * @author Thomas Quitter
 */
public class NotePanel extends JPanel implements PanelInterface {
    
    private String addTitle;
    private String yesText;
    private String noText;
    private String deleteNote;
    private String deleteNoteTitle;

    private NoteItem[] noteItems;
    private NoteItem selectedItem;
    private int size;
    private static final String ALPHABETIC = "alphabetic";
    private static final String DATE = "date";
    private static final int MAXARRAYSIZE = 100;
    private final MouseListener listener;

    /**
     * Creates new form NotePanel
     */
    public NotePanel() {
        
        initComponents();
        setTexts(Settings.locale);

        listener = new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                notePanelMousePressed(evt);
            }
        };

        noteItems = new NoteItem[MAXARRAYSIZE];
        size = 0;
        selectedItem = null;

        
        TextFieldListener textFieldListener = new TextFieldListener();
        jTextFieldSearch.addMouseListener(textFieldListener);
        jPanelContent.setLayout(new WrapLayout(FlowLayout.LEFT, 10, 10));
        jTextFieldSearch.addMouseListener(textFieldListener);
        jPanelContent.setLayout(new WrapLayout(FlowLayout.LEFT, 10, 10));
        jPanelContent.setSize(new Dimension(300, 1));
    }
    
    
    public void setTexts(String locale) {
        Properties texts = null;
        switch (locale) {
            case "en":
                texts = Texts.props_en;
                break;
            case "de":
                texts = Texts.props_de;
                break;
        }

        if (texts != null) {
            jButtonNew.setText(texts.getProperty("jButtonNoteAdd"));
            jButtonEdit.setText(texts.getProperty("jButtonNoteChange"));
            jButtonDelete.setText(texts.getProperty("jButtonNoteDelete"));
            jLabelSearch.setText(texts.getProperty("jLabelNoteSearch") + ":");
            jLabelSort.setText(texts.getProperty("jLabelSort") + ":");
            addTitle = texts.getProperty("noteAddTitle");
            yesText = texts.getProperty("yes");
            noText = texts.getProperty("no");
            deleteNote = texts.getProperty("deleteNote");
            deleteNoteTitle = texts.getProperty("deleteNoteTitle");
            jComboBoxSort.setModel(new javax.swing.DefaultComboBoxModel(new String[]{
                texts.getProperty("sortDate"), texts.getProperty("sortTitle")}));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNew = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelContent = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jComboBoxSort = new javax.swing.JComboBox();
        jLabelSort = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(200, 200));

        jButtonNew.setText("Erstellen");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Ändern");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout jPanelContentLayout = new javax.swing.GroupLayout(jPanelContent);
        jPanelContent.setLayout(jPanelContentLayout);
        jPanelContentLayout.setHorizontalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        jPanelContentLayout.setVerticalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanelContent);

        jButtonDelete.setText("Löschen");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jLabelSearch.setText("Suche:");

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });

        jComboBoxSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Datum", "Alphabetisch" }));
        jComboBoxSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSortActionPerformed(evt);
            }
        });

        jLabelSort.setText("Sortieren:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonNew, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSort, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabelSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSearch))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNew)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonEdit)
                    .addComponent(jComboBoxSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSort))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSearch))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1))
        );

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * initNoteItems
     * Methode zum Aufbau zum ausgabe der NoteItems
     * 
     */
    private void initNoteItems(String searchString) {
        jPanelContent.removeAll();
        if (searchString.isEmpty()) {
            for (int i = 0; i < size; i++) {
                jPanelContent.add(noteItems[i]);
            }
        } else {    //Filtern anhand des Suchfeldes
            for (int i = 0; i < size; i++) {
                String regex = ".*" + searchString.toLowerCase() + ".*";
                if (noteItems[i].getTitle().toLowerCase().matches(regex) | noteItems[i].getContent().toLowerCase().replaceAll("\n", "").matches(regex)) {
                    jPanelContent.add(noteItems[i]);
                }
            }
        }
        jPanelContent.updateUI();
        

        if (size > 0) {
            selectNote(noteItems[size - 1]);
        }
    }

    /**
     * updateValues
     * 
     * @param values 
     */
    @Override
    public void updateValues(Object[] values) {
        Note[] notes = (Note[]) values;
        if (notes != null) {
            size = notes.length;
            for (int i = 0; i < size; i++) {
                noteItems[i] = new NoteItem(notes[i]);
                noteItems[i].addMouseListener(listener);
            }
        } else {
            noteItems = new NoteItem[MAXARRAYSIZE];
            size = 0;
            selectedItem = null;
        }
        initNoteItems(""); //aufbau der Ausgabe ohne Suchparameter
    }

    /**
     * insertValue
     * @param value 
     */
    @Override
    public void insertValue(Object value) {
        Note note = (Note) value;
        NoteItem noteIt = new NoteItem(note);
        noteIt.addMouseListener(listener);
        noteItems[size++] = noteIt;
        initNoteItems("");

    }

    /**
     * getValues
     * @return 
     */
    @Override
    public Object[] getValues() {
        Note[] notes = new Note[size];
        for (int i = 0; i < size; i++) {
            notes[i] = noteItems[i].getNote();
        }
        return notes;
    }

    /**
     * changeValue
     * @param value 
     */
    @Override
    public void changeValue(Object value) {
        Note note = (Note) value;
        int index = getIndex(note);
        noteItems[index].setNote(note);
    }

    /**
     * deleteValue
     * @param value 
     */
    @Override
    public void deleteValue(Object value) {
        int index = getIndex((Note) value);
        for (int i = index; i < size - 1; i++) {
            noteItems[i] = noteItems[i + 1];
        }
        noteItems[--size] = null;
        selectedItem = null;
        selectNote(null);
        initNoteItems("");
    }

    /**
     * showAddDialog
     * @param date
     * @param rootWindow 
     */
    @Override
    public void showAddDialog(Date date, JFrame rootWindow) {
        Note note = null;
        if (date != null) {
            note = new Note(0, null, null, date);
        }
        CreateNoteDialog dialog = new CreateNoteDialog(rootWindow, true, note);
        dialog.setTitle(addTitle);
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
        note = dialog.getNote();
        if (note != null) {
            insertValue(note);
        }
    }

    /**
     * showChangeDialog
     * @param value
     * @param rootWindow 
     */
    @Override
    public void showChangeDialog(Object value, JFrame rootWindow) {
        Note note = (Note) value;
        CreateNoteDialog dialog = new CreateNoteDialog(rootWindow, true, note);
        dialog.setTitle(note.getTitle());
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
        note = dialog.getNote();
        if (note != null) {
            changeValue(note);
        }
    }

    /**
     * showDeleteDialog
     * @param value
     * @param rootWindow 
     */
    @Override
    public void showDeleteDialog(Object value, JFrame rootWindow) {
        Note note = (Note) value;
        Object[] options = {yesText, noText};
        int n = JOptionPane.showOptionDialog(getRootWindow(),
                MessageFormat.format(deleteNote, note.getTitle()),
                deleteNoteTitle,
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (n == 0) {
            deleteValue(note);
        }
    }

    /**
     * jButtonNewActionPerformed
     * Button-Listener zum erstellen einer neuen Notiz
     * @param evt 
     */
    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        if (size < noteItems.length) {
            JFrame rootWindow = getRootWindow();
            showAddDialog(null, rootWindow);
        } else {
            JOptionPane.showMessageDialog(getRootWindow(),
                    "Es können maximal " + noteItems.length + " Notizen erstellt werden.");
        }
    }//GEN-LAST:event_jButtonNewActionPerformed

    /**
     * jButtonEditActionPerformed
     * Button-Listener zum bearbeiten einer Notiz
     * @param evt 
     */
    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        JFrame rootWindow = getRootWindow();
        if (selectedItem != null) {
            showChangeDialog(selectedItem.getNote(), rootWindow);
        } else {
            JOptionPane.showMessageDialog(rootWindow, "Es ist keine Notiz ausgewählt.");
        }
    }//GEN-LAST:event_jButtonEditActionPerformed

    /**
     * jButtonDeleteActionPerformed
     * Button-Listener zum loeschen einer Notiz
     * @param evt 
     */
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        JFrame rootWindow = getRootWindow();
        if (selectedItem != null) {
            showDeleteDialog(selectedItem.getNote(), rootWindow);
        } else {
            JOptionPane.showMessageDialog(getRootWindow(), "Es ist keine Notiz ausgewählt.");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    /**
     * jComboBoxSortActionPerformed
     * Listener fuer die Such-Dropdownliste
     * @param evt 
     */
    private void jComboBoxSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSortActionPerformed
        int sortBy = jComboBoxSort.getSelectedIndex();
        if (sortBy == 0) {
            sortList(DATE);     //Sortierung nach Datum aufsteigend
        } else {
            sortList(ALPHABETIC);   //Sortierung nach Alphabet aufsteigend
        }
    }//GEN-LAST:event_jComboBoxSortActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
                        String searchstring = jTextFieldSearch.getText().trim();
        initNoteItems(searchstring);
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    /**
     * Methode zum anwaehlen eines NoteItems
     * @param evt 
     */
    private void notePanelMousePressed(MouseEvent evt) {
        if (evt.getButton() == 1) {
            NoteItem noteItem = null;
            
            if (evt.getComponent() instanceof NoteItem) {
                noteItem = (NoteItem) evt.getComponent();
                selectNote(noteItem);
            }
            if (evt.getComponent() instanceof JTextArea) {  // wird nicht ausgelöst, kp warum bei events funktionierts...
                noteItem = (NoteItem) evt.getComponent().getParent().getParent().getParent();   //Hab den Code auch nochmal komplett Code mit den Events verglichen und konnte den Fehler ebenfalls nicht feststellen - Thomas
                selectNote(noteItem);
            }
            if (evt.getComponent() instanceof JLabel) {
                noteItem = (NoteItem) evt.getComponent().getParent();
                selectNote(noteItem);
            }
            if (noteItem != null && evt.getClickCount() == 2) {
                showChangeDialog(noteItem.getNote(), getRootWindow());
            }
        }
    }

    
    private int getIndex(Note note) {
        int index = -1;
        for (int i = 0; i < size; i++) {
            if (note == noteItems[i].getNote()) {
                index = i;
                break;
            }
        }
        return index;
    }


    private void selectNote(NoteItem noteItem) {
        selectedItem = noteItem;
        for (int i = 0; i < size; i++) {
            noteItems[i].unselect();
        }
        if (noteItem != null) {
            noteItem.select();
        }
    }

    /**
     * Sortieren der Notes ueber collections und comparators
     * @param sortBy 
     */
    private void sortList(String sortBy) {

        if (noteItems.length > 0) {

            List<NoteItem> tempNoteItemList = new ArrayList<NoteItem>();

            for (int i = 0; i < size; i++) {
                tempNoteItemList.add(noteItems[i]);
            }

            switch (sortBy) {
                case ALPHABETIC:
                    Collections.sort(tempNoteItemList, TITLE_COMPARATOR);
                    int i = 0;
                    for (NoteItem noteItemTemp : tempNoteItemList) {
                        noteItems[i] = noteItemTemp;
                        i++;
                    }
                    initNoteItems(jTextFieldSearch.getText());
                    selectNote(null);
                    break;

                case DATE:

                    Collections.sort(tempNoteItemList, DATE_COMPARATOR);
                    i = 0;
                    for (NoteItem noteItemTemp : tempNoteItemList) {
                        noteItems[i] = noteItemTemp;
                        i++;
                    }
                    initNoteItems(jTextFieldSearch.getText());
                    selectNote(null);
                    break;
            }
        }
    }

    
    private JFrame getRootWindow() {
        return (JFrame) SwingUtilities.getWindowAncestor(this.getParent());
    }
    
    /**
     * Comparator zum alphabetischen Sortieren (nach Titel) der Notes
     */
    public final static Comparator<NoteItem> TITLE_COMPARATOR = new Comparator<NoteItem>() {
        @Override
        public int compare(NoteItem p1, NoteItem p2) {
            return p1.getTitle().toLowerCase().compareTo(p2.getTitle().toLowerCase());
        }
    };
    
    /**
     * Comparator zum Sortieren der Notes nach Datum
     */
    public final static Comparator<NoteItem> DATE_COMPARATOR = new Comparator<NoteItem>() {
        @Override
        public int compare(NoteItem p1, NoteItem p2) {
            return p1.getDate().compareTo(p2.getDate());
        }
    };
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JComboBox jComboBoxSort;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelSort;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}