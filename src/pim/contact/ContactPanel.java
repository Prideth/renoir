/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pim.contact;

import java.awt.Color;
import java.util.Date;
import java.util.Properties;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Group;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import pim.PanelInterface;
import pim.Settings;
import pim.TextFieldListener;
import pim.Texts;

/**
 *
 * @author lk
 */
public class ContactPanel extends JPanel implements PanelInterface {

    ContactItem[] contactItems;
    ContactItem selectedContact;
    
    private int size;
    private ImageIcon okIcon;
    private ImageIcon cancelIcon;
    private boolean search;

    /**
     * Creates new form ContactPanel
     */
    public ContactPanel() {
        okIcon = new javax.swing.ImageIcon(getClass().getResource("/pim/icons/ok.png"));
        cancelIcon = new javax.swing.ImageIcon(getClass().getResource("/pim/icons/cancel.png"));

        selectedContact = null;

        initComponents();
        setTexts(Settings.locale);
        TextFieldListener textFieldListener = new TextFieldListener();
        jTextFieldSearch.addMouseListener(textFieldListener);
        contactItems = new ContactItem[100];
        size = 0;
    }
    
    public void setTexts(String locale) {
        Properties texts = null;
        switch (locale) {
            case "en":
                texts = Texts.props_en;
                break;
            case "de":
                texts = Texts.props_de;
                break;
        }

        if (texts != null) {
        }

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneContent = new javax.swing.JScrollPane();
        jPanelContent = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonChange = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();

        jScrollPaneContent.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout jPanelContentLayout = new javax.swing.GroupLayout(jPanelContent);
        jPanelContent.setLayout(jPanelContentLayout);
        jPanelContentLayout.setHorizontalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );
        jPanelContentLayout.setVerticalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );

        jScrollPaneContent.setViewportView(jPanelContent);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jButtonAdd.setText("Erstellen");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonChange.setText("Ändern");
        jButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Löschen");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonChange, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonAdd)
                .addComponent(jButtonChange)
                .addComponent(jButtonDelete))
        );

        jPanel2.add(jPanel3);

        jLabelSearch.setText("Suche: ");
        jPanel2.add(jLabelSearch);

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });
        jPanel2.add(jTextFieldSearch);

        jButtonSearch.setIcon(okIcon);
        jButtonSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 6, 6, 6));
        jButtonSearch.setEnabled(false);
        jButtonSearch.setIconTextGap(0);
        jButtonSearch.setInheritsPopupMenu(true);
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonSearch);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneContent)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPaneContent, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initContactItems(String searchString) {
        
        
        jPanelContent.removeAll();

        GroupLayout layout = new GroupLayout(jPanelContent);
        jPanelContent.setLayout(layout);

        Group group1 = layout.createParallelGroup(GroupLayout.Alignment.LEADING);
        Group group2 = layout.createSequentialGroup().addGap(5);

        for (int i = size - 1; i >= 0; i--) {
            boolean show = false;
            if (searchString == null) {
                show = true;
            } else {
                String regex = ".*" + searchString.toLowerCase() + ".*";
                String title = contactItems[i].getContact().getName().toLowerCase();
                String content1 = contactItems[i].getContact().getContent1();
                String content2 = contactItems[i].getContact().getContent2();
                String content3 = contactItems[i].getContact().getContent3();
                content1 = (content1 != null) ? content1.toLowerCase() : null;
                content2 = (content2 != null) ? content2.toLowerCase() : null;
                content3 = (content3 != null) ? content3.toLowerCase() : null;
                if (title.matches(regex)
                        || ((content1 != null) && content1.matches(regex))
                        || ((content2 != null) && content2.matches(regex))
                        || ((content3 != null) && content3.matches(regex))) {
                    show = true;
                    search = true;
                }
            }
            if (show) {
                contactItems[i].setPosition(i);
                group1.addComponent(contactItems[i], GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE);
                group2.addComponent(contactItems[i], GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE);
                group2.addGap(5);
            }
        }

        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(group1)
                .addContainerGap()));

        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(group2));

        //selectContact(size - 1);
    }

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if (size < contactItems.length) {
            JFrame rootWindow = getRootWindow();
            showAddDialog(null, rootWindow);
        } else {
            JOptionPane.showMessageDialog(getRootWindow(),
                    "Es können maximal " + contactItems.length + " Kontakte erstellt werden.");
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeActionPerformed
        if (selectedContact != null) {
            showChangeDialog(selectedContact.getContact(), getRootWindow());
        } else {
            JOptionPane.showMessageDialog(getRootWindow(), "Es ist kein Kontakt ausgewählt.");
        }
    }//GEN-LAST:event_jButtonChangeActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        if (selectedContact != null) {
            showDeleteDialog(selectedContact.getContact(), getRootWindow());
        } else {
            JOptionPane.showMessageDialog(getRootWindow(), "Es ist kein Kontakt ausgewählt.");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        if (!search && jTextFieldSearch.getText().trim().isEmpty()) {
            jButtonSearch.setEnabled(false);
        } else {
            jButtonSearch.setEnabled(true);
        }
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        if (!search) {
            String searchstring = jTextFieldSearch.getText().trim();
            if (!searchstring.isEmpty()) {
                initContactItems(searchstring);
                if (!search) {

                    initContactItems(null);
                    JOptionPane.showMessageDialog(getRootWindow(), "Nichts gefunden.");
                } else {
                     selectContact(null);
                    jButtonSearch.setIcon(cancelIcon);
                }
            }
        } else {
            if (jTextFieldSearch.getText().trim().isEmpty()) {
                jButtonSearch.setEnabled(false);
            }
            search = false;
            jButtonSearch.setIcon(okIcon);
            initContactItems(null);
        }

    }//GEN-LAST:event_jButtonSearchActionPerformed

    @Override
    public void updateValues(Object[] values) {
        Contact[] contacts = (Contact[]) values;
        contactItems = new ContactItem[100];
        size = 0;
        selectedContact = null;
        if (contacts != null) {
            size = contacts.length;
            for (int i = 0; i < size; i++) {
                contactItems[i] = new ContactItem(contacts[i]);
                contactItems[i].addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mousePressed(java.awt.event.MouseEvent evt) {
                        personPanelMousePressed(evt);
                    }
                });
            }
        }
        initContactItems(null);
    }

    @Override
    public void insertValue(Object value) {
        Contact contact = (Contact) value;
        ContactItem p = new ContactItem(contact);
        p.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                personPanelMousePressed(evt);
            }
        });
        contactItems[size++] = p;
        initContactItems(null);
    }

    @Override
    public Object[] getValues() {
        Contact[] contacts = new Contact[size];
        for (int i = 0; i < size; i++) {
            contacts[i] = contactItems[i].getContact();
        }
        return contacts;
    }

    @Override
    public void changeValue(Object value) {
        Contact contact = (Contact) value;
        int index = getIndex(contact);
        contactItems[index].setContact(contact);
        contactItems[index].update();
    }

    @Override
    public void deleteValue(Object value) {
        int index = getIndex((Contact) value);
        for (int i = index; i < size - 1; i++) {
            contactItems[i] = contactItems[i + 1];
        }
        contactItems[--size] = null;
        selectedContact = null;
        initContactItems(null);
    }

    @Override
    public void showAddDialog(Date date, JFrame rootWindow) {
        CreateContactDialog dialog = new CreateContactDialog(rootWindow, true, null);
        dialog.setTitle("Kontakt erstellen");
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
        Contact contact = dialog.getContact();
        if (contact != null) {
            insertValue(contact);
        }
    }

    @Override
    public void showChangeDialog(Object value, JFrame rootWindow) {
        Contact contact = (Contact) value;
        CreateContactDialog dialog = new CreateContactDialog(rootWindow, true, contact);
        dialog.setTitle(contact.getName());
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
        contact = dialog.getContact();
        if (contact != null) {
            changeValue(contact);
        }
    }

    @Override
    public void showDeleteDialog(Object value, JFrame rootWindow) {
        Contact contact = (Contact) value;
        Object[] options = {"Ja", "Nein"};
        int n = JOptionPane.showOptionDialog(getRootWindow(),
                "Kontakt \"" + contact.getName() + "\" löschen?",
                "Löschen bestätigen",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (n == 0) {
            deleteValue(contact);
        }
    }

    private void personPanelMousePressed(java.awt.event.MouseEvent evt) {
        if (evt.getButton() == 1) {
            if (evt.getComponent() instanceof ContactItem) {
                selectedContact = (ContactItem) evt.getComponent();
                selectContact(selectedContact);
                if (evt.getClickCount() == 2) {
                    showChangeDialog(selectedContact.getContact(), getRootWindow());
                }
            }
        }
    }

    private int getIndex(Contact contact) {
        int index = -1;
        for (int i = 0; i < size; i++) {
            if (contact == contactItems[i].getContact()) {
                index = i;
                break;
            }
        }
        return index;
    }

    private void selectContact(ContactItem contactItem) {
        for (int i = 0; i < size; i++) {
            contactItems[i].unselect();
        }
        if (contactItem != null) {
            contactItem.select();
        }
    }

    private JFrame getRootWindow() {
        return (JFrame) SwingUtilities.getWindowAncestor(this.getParent());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonChange;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JScrollPane jScrollPaneContent;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}