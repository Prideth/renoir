/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pim.mail;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.internet.AddressException;
import javax.mail.internet.ContentType;
import javax.mail.internet.MimeBodyPart;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import pim.*;
import pim.util.ObjectSerializer;

/**
 *
 * @author lk
 */
public class MailPanel extends JPanel {

    MailTableModel model;
Mail selectedMail;
    /**
     * Creates new form MailForm
     */
    public MailPanel() {
        initComponents();

        TextFieldListener textFieldListener = new TextFieldListener();
        jTextFieldSearch.addMouseListener(textFieldListener);

        jTableMails.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableMails.getSelectionModel().addListSelectionListener(new MySelectionListener(jTableMails));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxFolder = new javax.swing.JComboBox();
        jButtonWriteMail = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabelSearch = new javax.swing.JLabel();
        jSplitPane = new javax.swing.JSplitPane();
        jScrollPane = new javax.swing.JScrollPane();
        jTableMails = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonReply = new javax.swing.JButton();
        jButtonForward = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMailBody = new javax.swing.JTextArea();
        jLabelStatus = new javax.swing.JLabel();
        jButtonReceiveMail = new javax.swing.JButton();

        jComboBoxFolder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Posteingang", "Gesendet", "Entwürfe", "Spam", "Papierkorb" }));
        jComboBoxFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFolderActionPerformed(evt);
            }
        });

        jButtonWriteMail.setText("Verfassen");
        jButtonWriteMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWriteMailActionPerformed(evt);
            }
        });

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });

        jLabelSearch.setText("Suche:");

        jSplitPane.setBorder(null);
        jSplitPane.setDividerLocation(180);
        jSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTableMails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Betreff", "Absender", "Datum"
            }
        ));
        jTableMails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableMails.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableMailsFocusGained(evt);
            }
        });
        jScrollPane.setViewportView(jTableMails);

        jSplitPane.setLeftComponent(jScrollPane);

        jButtonReply.setText("Antworten");
        jButtonReply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReplyActionPerformed(evt);
            }
        });

        jButtonForward.setText("Weiterleiten");
        jButtonForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForwardActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Löschen");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jTextAreaMailBody.setColumns(20);
        jTextAreaMailBody.setRows(5);
        jTextAreaMailBody.setLineWrap(true);
        jScrollPane1.setViewportView(jTextAreaMailBody);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButtonReply, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonForward, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 236, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReply)
                    .addComponent(jButtonForward)
                    .addComponent(jButtonDelete))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
        );

        jSplitPane.setRightComponent(jPanel1);

        jLabelStatus.setText("Statusleiste");

        jButtonReceiveMail.setText("Empfangen");
        jButtonReceiveMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReceiveMailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jComboBoxFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonWriteMail, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonReceiveMail)
                .addGap(18, 18, 18)
                .addComponent(jLabelSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSearch)
                .addContainerGap())
            .addComponent(jSplitPane)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonWriteMail)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSearch)
                    .addComponent(jButtonReceiveMail))
                .addGap(1, 1, 1)
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jLabelStatus))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForwardActionPerformed
      JFrame rootWindow = (JFrame) SwingUtilities.getWindowAncestor(this.getParent());
        MailWriteDialog dialog = new MailWriteDialog(rootWindow, true, selectedMail);
        dialog.setTitle("Email weiterleiten");
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonForwardActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonWriteMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWriteMailActionPerformed
        JFrame rootWindow = (JFrame) SwingUtilities.getWindowAncestor(this.getParent());
        MailWriteDialog dialog = new MailWriteDialog(rootWindow, true, null);
        dialog.setTitle("Email verfassen");
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonWriteMailActionPerformed

    private void jButtonReceiveMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReceiveMailActionPerformed
        GetMails getMails = new GetMails();
        Thread mThread = new Thread(getMails);
        mThread.start();
    }//GEN-LAST:event_jButtonReceiveMailActionPerformed

    private void jTableMailsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableMailsFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableMailsFocusGained

    private void jButtonReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReplyActionPerformed
       JFrame rootWindow = (JFrame) SwingUtilities.getWindowAncestor(this.getParent());
        MailWriteDialog dialog = new MailWriteDialog(rootWindow, true, selectedMail);
        dialog.setTitle("Email antworten");
        dialog.setLocationRelativeTo(rootWindow);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButtonReplyActionPerformed

    private void jComboBoxFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFolderActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonForward;
    private javax.swing.JButton jButtonReceiveMail;
    private javax.swing.JButton jButtonReply;
    private javax.swing.JButton jButtonWriteMail;
    private javax.swing.JComboBox jComboBoxFolder;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JTable jTableMails;
    private javax.swing.JTextArea jTextAreaMailBody;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    class GetMails implements Runnable {

        @Override
        public void run() {
            ArrayList<Mail> receive = null;
            try {
                jLabelStatus.setText("Empfange Emails...");

                ObjectSerializer so = new ObjectSerializer();
                File f = new File(System.getProperty("user.home") + "/pim/" + "mailaccount.ser");

                if (!f.exists()) {
                    JFrame rootWindow = (JFrame) SwingUtilities.getWindowAncestor(getParent());
                    MailSettings dialog = new MailSettings(rootWindow, true);
                    dialog.setTitle("E-Mail Einstellungen");
                    dialog.setLocationRelativeTo(rootWindow);
                    dialog.setVisible(true);
                } else {
                    MailAccount acc = (MailAccount) so.readFromFile(f);
                    receive = MailFunction.receive(acc);
                }
                
            } catch (AddressException ex) {
                Logger.getLogger(MailPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MessagingException ex) {
                Logger.getLogger(MailPanel.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                jLabelStatus.setText("Statusleiste");
                setMails(receive);
            }
        }
    }

    private void setMails(ArrayList<Mail> a) {
        model = new MailTableModel();
        jTableMails.setModel(model);

        if (a.size() > 0)
        for (int i = 0; i < a.size(); i++) {
            model.addMail(a.get(i));
        }
    }

    private void setContent(Object content, ContentType contentType, boolean msgType) throws MessagingException, IOException {

        jTextAreaMailBody.setText((String) content);
    }
    
    class MySelectionListener implements ListSelectionListener {

        JTable table;

        public MySelectionListener(JTable table) {
            this.table = table;
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            try {
                selectedMail = model.getMailAt(table.getSelectedRow());
                setContent(model.getMailAt(table.getSelectedRow()).getContent(), model.getMailAt(table.getSelectedRow()).getContentType(), model.getMailAt(table.getSelectedRow()).getMsgType());
            } catch (MessagingException ex) {
                Logger.getLogger(MailPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MailPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
